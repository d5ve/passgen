=head1 NAME

passgen - generate secure-ish passwords

=head1 SYNOPSIS

    passgen [num words]

    Examples:

        # Default three-word passphrase.
        $ passgen

        # Stronger five-word passphrase.
        $ passgen 5

=head1 DESCRIPTION

This perl script generates passwords/passphrases from my chosen template. This
template is for three or more short words to be concatenated together. The
first word is all lowercase, the second word is ALL UPPERCASE, and the third
word uses the standard 'replace vowels with numbers' leetspeek transform. Any
further words continue the pattern starting at step 1 again.

For example:

    hairedBROACHn33d1ng              haired  broach  needing
    tornSTUDIOh1ll                   torn    studio  hill
    facedBANGINGf33d1ngneutral       faced   banging feeding neutral
    azureNEALb41t1ngtarnishCINDER    azure   neal    baiting tarnish cinder

I use these passwords for signing up on various websites, and want to balance
the ease of remembering these passwords against their worst-case crackability.

I've taken the words lists from two different sources:

    1) The New General Service List (NSGL)
       http://www.newgeneralservicelist.org
       Creative Commons Attribution 3.0 Unported License
    2) Wiktionary.org's Project Gutenberg frequency lists. 
       https://en.wiktionary.org/wiki/Wiktionary:Frequency_lists#Project_Gutenberg
       Creative Commons Attribution-ShareAlike License

This is security through obscurity, as if an attacker knows the template and
the wordlists, then they can easily craft a password cracker to suit.

Three-word passwords at least have a length of 12 characters or more, and won't
fall to the simplest dictionary attacks.

Don't use these passwords for anything important, however, as there just isn't
enough entropy to be safe.

For example, with the 8544 common english words used here, the number of
passphrases is 8544 * 8544 * 8544, or 623,711,453,184. This appears a pretty
large number, but modern password crackers can test billions of passwords per
second, so less than ten minutes on average if the wordlists and algorithm are
known.

Even a random 8-character password made up of those characters you can easily
enter from the keyboard has larger entropy. My keyboard allows me to easily
enter a-zA-Z0-9 plus the punctuation and other special characters:
!@Â£$%^&*()_+-={}[ ]:"|;'\<>?,./ This comes to 93 different characters, and 93^8
(2,252,292,232,139,041) combinations, which is 9000 times as large as the number
from the three dictionary words above, so should take 9000 times longer to
crack.

This script hasn't been audited by anyone who knows anything about password
security.

=head1 TODO

=over

=item * Have min/max word length and vowel numbers as commandline args.

=back


=cut

=head1 LICENCE

Copyright 2015 Dave Webb

passgen is free software. You can do B<anything> you like with it.


=cut

